import axios from 'axios';
import config from '../../config.js';

export default {
    name: 'screenshot',
    aliases: ['ss', 'ssweb', 'capture'],
    category: 'downloader',
    description: 'Take screenshot of a website',
    usage: 'screenshot <url>',
    cooldown: 5,
    permissions: ['user'],
    args: true,
    minArgs: 1,
    maxArgs: 1,
    typing: true,
    premium: false,
    hidden: false,
    ownerOnly: false,
    supportsReply: false,
    supportsChat: true,
    supportsReact: true,
    supportsButtons: false,

    async execute({ sock, message, args, from, prefix }) {
        const url = args[0];

        if (!url.startsWith('http://') && !url.startsWith('https://')) {
            await sock.sendMessage(from, {
                text: `❌ ERROR\nMessage: Invalid URL\n\n💡 Usage: ${prefix}screenshot <valid-url>\n📝 Example: ${prefix}screenshot https://google.com`
            }, { quoted: message });
            return;
        }

        try {
            // React with loading
            await sock.sendMessage(from, {
                react: {
                    text: '⏳',
                    key: message.key
                }
            });

            // Send awaiting message
            const awaitText = '🔄 Generating screenshot...';
            const awaitMsg = await sock.sendMessage(from, { text: awaitText }, { quoted: message });

            // Fetch screenshot with longer timeout
            const apiUrl = `https://kaiz-apis.gleeze.com/api/screenshot?url=${encodeURIComponent(url)}&apikey=a0ebe80e-bf1a-4dbf-8d36-6935b1bfa5ea`;
            const response = await axios.get(apiUrl, { 
                responseType: 'arraybuffer',
                timeout: 60000 // 60s timeout for slow responses
            });

            const imageBuffer = Buffer.from(response.data, 'binary');

            // Send screenshot
            await sock.sendMessage(from, {
                image: imageBuffer,
                caption: `📸 Screenshot of:\n${url}\n\n💫 Generated by ${config.botName}`
            }, { quoted: message });

            // Delete awaiting message
            await sock.sendMessage(from, { delete: awaitMsg.key });

        } catch (error) {
            console.error('Screenshot error:', error);
            await sock.sendMessage(from, {
                text: `❌ ERROR\nMessage: Failed to generate screenshot\n\n⚠️ Error: ${error.message}\n🔄 Try again later`
            }, { quoted: message });

            // Delete awaiting message if exists
            try {
                await sock.sendMessage(from, { delete: awaitMsg.key });
            } catch (deleteError) {
                console.error('Failed to delete awaiting message:', deleteError);
            }
        }
    }
};